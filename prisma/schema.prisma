generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  password_hash     String?
  githubId          String?   @unique
  googleId          String?   @unique
  bio               String?
  image             String?
  links             Json?
  interest          String[]
  reputation_points Int?      @default(0)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  emailVerified     DateTime?

  account Account[]
  session Session[]

  snippets  Snippet[]
  reuse     Reuse[]
  questions Question[]
  answers   Answer[]
  votes     Vote[]
  comments  Comment[]
  posts     Post[]
  articles  Article[]
}

model Snippet {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  title       String
  code        String
  description String
  visibility  String // values: public, private, shared
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  tags        SnippetTag[]
  comments    Comment[]
}

model Tag {
  id       String       @id @default(uuid())
  name     String
  snippets SnippetTag[]
}

model SnippetTag {
  id         String  @id @default(uuid())
  snippet    Snippet @relation(fields: [snippet_id], references: [id], onDelete: Cascade)
  snippet_id String
  tag        Tag     @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  tag_id     String
  Reuse      Reuse?  @relation(fields: [reuseId], references: [id])
  reuseId    String?
}

model Question {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  title       String
  description String
  images      String[]
  links       String[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  answers     Answer[]
  comments    Comment[]
}

model Answer {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  question    Question  @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id String
  answer_text String
  images      String[]
  links       String[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  comments    Comment[]
  votes       Vote[]
}

model Comment {
  id               String    @id @default(uuid())
  user             User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id          String
  comment_text     String
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  commentable_id   String
  commentable_type String // Snippet, Question, Answer
  Snippet          Snippet?  @relation(fields: [snippetId], references: [id])
  snippetId        String?
  Question         Question? @relation(fields: [questionId], references: [id])
  questionId       String?
  Answer           Answer?   @relation(fields: [answerId], references: [id])
  answerId         String?
  Reuse            Reuse?    @relation(fields: [reuseId], references: [id])
  reuseId          String?
  Post             Post?     @relation(fields: [postId], references: [id])
  postId           String?
  Article          Article?  @relation(fields: [articleId], references: [id])
  articleId        String?
}

model Vote {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String
  vote_type     String // values: upvote, downvote
  voteable_id   String
  voteable_type String // Question or Answer
  created_at    DateTime @default(now())
  Answer        Answer?  @relation(fields: [answerId], references: [id])
  answerId      String?
  Post          Post?    @relation(fields: [postId], references: [id])
  postId        String
  Article       Article? @relation(fields: [articleId], references: [id])
  articleId     String
}

model Reuse {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  title       String
  code        String
  description String
  images      String[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  tags        SnippetTag[]
  comments    Comment[]
}

model Article {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  title       String
  description String
  images      String[]
  links       String[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  comments    Comment[]
  votes       Vote[]
}

model Post {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  title       String
  description String
  images      String[]
  links       String[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  comments    Comment[]
  votes       Vote[]
}
